generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  fullName     String
  realName     String?
  email        String   @unique
  password     String
  bornDate     String?
  address      String?
  photoProfile String?
  coverImage   String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  followers          Follow[]             @relation("Followers")
  followings         Follow[]             @relation("Following")
  likes              Like[]
  replies            Reply[]
  threads            Thread[]
  PasswordResetToken PasswordResetToken[]

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passwordResetTokens")
}

model Thread {
  id        String   @id @default(uuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  likes   Like[]
  replies Reply[]

  userId String
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("threads")
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  userId String
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Follow {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  targetId String
  target   User   @relation(fields: [targetId], references: [id], name: "Followers")

  followerId String
  follower   User   @relation(fields: [followerId], references: [id], name: "Following")

  @@map("follows")
}
